from __future__ import annotations
import re
import pandas as pd
from typing import Any, Dict


class HVDCValidator:
    @staticmethod
    def validate_hvdc_code(code: str) -> Dict[str, Any]:
        result: Dict[str, Any] = {
            "valid": False,
            "formatted_code": None,
            "manufacturer": None,
            "sequence": None,
            "original_code": code,
            "was_normalized": False,
            "error": None,
        }
        if code is None:
            result["error"] = "empty"
            return result

        raw = str(code).strip()
        compact = re.sub(r"[\s_]+", "-", raw).upper()
        compact = re.sub(r"-+", "-", compact).strip("-")

        strict = re.match(r"^HVDC-ADOPT-(HE|SIM)-(\d{1,4})$", compact)
        tolerant = re.match(
            r"^HVDC\s*-?\s*ADOPT\s*-?\s*(HE|SIM)\s*-?\s*(\d{1,4})$",
            raw,
            flags=re.IGNORECASE,
        )
        m = strict or tolerant
        if not m:
            result["error"] = f"invalid format: {raw}"
            return result

        manufacturer = m.group(1).upper()
        seq_str = m.group(2)
        try:
            seq = int(seq_str)
        except Exception:
            result["error"] = f"sequence not numeric: {seq_str}"
            return result

        if not (1 <= seq <= 9999):
            result["error"] = f"sequence out of range: {seq}"
            return result

        formatted = f"HVDC-ADOPT-{manufacturer}-{seq:04d}"
        result.update(
            valid=True,
            formatted_code=formatted,
            manufacturer=manufacturer,
            sequence=seq,
            was_normalized=(formatted != raw),
            error=None,
        )
        return result

    @staticmethod
    def _values_equal_safe(val1, val2) -> bool:
        """pandas array 비교를 안전하게 처리하는 헬퍼 메서드"""
        try:
            # pandas Series나 numpy array인 경우 첫 번째 요소 추출
            if hasattr(val1, "__len__") and not isinstance(val1, str):
                val1 = val1.iloc[0] if hasattr(val1, "iloc") else val1[0]
            if hasattr(val2, "__len__") and not isinstance(val2, str):
                val2 = val2.iloc[0] if hasattr(val2, "iloc") else val2[0]

            # NaN 값 처리
            val1_is_na = (
                pd.isna(val1)
                if pd.__version__ >= "1.0.0"
                else (val1 is None or str(val1).strip() == "")
            )
            val2_is_na = (
                pd.isna(val2)
                if pd.__version__ >= "1.0.0"
                else (val2 is None or str(val2).strip() == "")
            )

            if val1_is_na and val2_is_na:
                return True
            if val1_is_na or val2_is_na:
                return False

            return str(val1).strip() == str(val2).strip()
        except Exception:
            return str(val1) == str(val2)
